rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ mkdir -p modules/networking modules/ecr modules/ecs
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create main.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > main.tf << 'EOF'
// AWS> // AWS Cloud Infrastructure with Terraform
> // Main configuration file
>
ovider "> provider "aws" {
>   region = var.aws_region
> }
>
> // VPC and Networking Module
> module "networking" {
urce = ">   source = "./modules/networking"
>
>   vpc_cidr             = var.vpc_cidr
lic_sub>   public_subnet_cidrs  = var.public_subnet_cidrs
>   private_subnet_cidrs = var.private_subnet_cidrs
availabi>   availability_zones   = var.availability_zones
>   environment          = var.environment
> }
>
> // ECR Module for Container Repositories
> module "ecr" {
source =>   source = "./modules/ecr"
reposito>
>   repository_names = var.app_names
>   environment      = var.environment
}

// E> }
>
> // ECS Module for Fargate Services
> module "ecs" {
>   source = "./modules/ecs"
>
 vpc_id>   vpc_id                = module.networking.vpc_id
>   public_subnet_ids     = module.networking.public_subnet_ids
>   private_subnet_ids    = module.networking.private_subnet_ids
names   >   app_names             = var.app_names
_ports >   app_ports             = var.app_ports
>   container_image       = var.container_image
nvironme>   environment           = var.environment
>   ecr_repository_urls   = module.ecr.repository_urls
> }
iables.t> EOF
f
cat > variables.tf << 'EOF'
// Variables for the AWS infrastructure

variable "aws_region" {
  description = "The AWS region to deploy resources"
  type        = string
  default     = "ap-southeast-1"
}

variable "environment" {
  description = "The deployment environment (dev, staging, prod)"
  type        = string
  default     = "dev"
}

// VPC and Network variables
variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
  default     = "10.0.0.0/16"
}

variable "public_subnet_cidrs" {
  description = "CIDR blocks for the public subnets"
  type        = list(string)
  default     = ["10.0.1.0/24", "10.0.2.0/24"]
}

variable "private_subnet_cidrs" {
  description = "CIDR blocks for the private subnets"
  type        = list(string)
  default     = ["10.0.3.0/24", "10.0.4.0/24"]
}

variable "availability_zones" {
  description = "Availability zones forae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
r the surae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create variables.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > variables.tf << 'EOF'
> // Variables for the AWS infrastructure
>
> variable "aws_region" {
>   description = "The AWS region to deploy resources"
>   type        = string
>   default     = "ap-southeast-1"
> }
>
> variable "environment" {
>   description = "The deployment environment (dev, staging, prod)"
>   type        = string
>   default     = "dev"
> }
>
> // VPC and Network variables
> variable "vpc_cidr" {
>   description = "CIDR block for the VPC"
>   type        = string
>   default     = "10.0.0.0/16"
> }
>
> variable "public_subnet_cidrs" {
>   description = "CIDR blocks for the public subnets"
>   type        = list(string)
>   default     = ["10.0.1.0/24", "10.0.2.0/24"]
> }
>
 = ["fa> variable "private_subnet_cidrs" {
 = "Po>   description = "CIDR blocks for the private subnets"
>   type        = list(string)
>   default     = ["10.0.3.0/24", "10.0.4.0/24"]
> }
>
> variable "availability_zones" {
>   description = "Availability zones for the subnets"
>   type        = list(string)
>   default     = ["ap-southeast-1a", "ap-southeast-1b"]
> }
>
> // Application variables
> variable "app_names" {
>   description = "Names of the applications to deploy"
>   type        = list(string)
>   default     = ["fastapi-app", "flask-app", "nextjs-app"]
> }
>
> variable "app_ports" {
0
    "flask-app"   = >   description = "Ports that the applications listen on"
>   type        = map(number)
>   default     = {
>     "fastapi-app" = 8000

  defau>     "flask-app"   = 5000
>     "nextjs-app"  = 3000
>   }
> }
> outpu>
> variable "container_image" {
>   description = "Docker image to use for containers (for testing)"
>   type        = string
>   default     = "nginx:latest"
> }
> EOF
< 'EOF'
// Output values from the infrastructure deployment

output "vpc_id" {
  description = "The ID of the VPC"
  value       = module.networking.vpc_id
}

output "public_subnet_ids" {
  description = "The IDs of the public subnets"
  value       = module.networking.public_subnet_ids
}

output "private_subnet_ids" {
  description = "The IDs of the private subnets"
  value       = module.networking.private_subnet_ids
}

output "ecr_repository_urls" {
  description = "The URLs of the ECR repositories"
  value       = module.ecr.repository_urls
}

output "load_balancer_dns" {
  description = "The DNS name of the load balancer"
  value       = module.ecs.load_balancer_dns
}

output "app_urls" {
  description = "URLs to access the deployed applications"
  value       = {
    for app in var.app_names : app => "http://${rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create outputs.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > outputs.tf << 'EOF'
module.e> // Output values from the infrastructure deployment
>
> output "vpc_id" {
>   description = "The ID of the VPC"
>   value       = module.networking.vpc_id
> }
>
> output "public_subnet_ids" {
>   description = "The IDs of the public subnets"
>   value       = module.networking.public_subnet_ids
> }
>
> output "private_subnet_ids" {
>   description = "The IDs of the private subnets"
>   value       = module.networking.private_subnet_ids
> }
>
> output "ecr_repository_urls" {
>   description = "The URLs of the ECR repositories"
>   value       = module.ecr.repository_urls
> }
>
> output "load_balancer_dns" {
>   description = "The DNS name of the load balancer"
>   value       = module.ecs.load_balancer_dns
> }
>
> output "app_urls" {
>   description = "URLs to access the deployed applications"
>   value       = {
>     for app in var.app_names : app => "http://${module.ecs.load_balancer_dns}:${var.app_ports[app]}"
aform provider configuration

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }

  required_version = ">= 1.2.0"
}
E>   }
> }
> EOF
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create providers.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > providers.tf << 'EOF'
> // Terraform provider configuration
>
> terraform {
>   required_providers {
>     aws = {
>       source  = "hashicorp/aws"
>       version = "~> 5.0"
>     }
>   }
>
>   required_version = ">= 1.2.0"
> }
> EOF
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create modules/networking/main.tf
t > modrae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > modules/networking/main.tf << 'EOF'
> // Networking module for VPC, subnets, and security
>
> // VPC
> resource "aws_vpc" "main" {
>   cidr_block           = var.vpc_cidr
>   enable_dns_support   = true
>   enable_dns_hostnames = true
>
>   tags = {
>     Name        = "${var.environment}-vpc"
>     Environment = var.environment
}
}

/>   }
> }
>
/ Publi> // Public subnets
> resource "aws_subnet" "public" {
>   count                   = length(var.public_subnet_cidrs)
>   vpc_id                  = aws_vpc.main.id
 cidr_b>   cidr_block              = var.public_subnet_cidrs[count.index]
>   availability_zone       = var.availability_zones[count.index]
>   map_public_ip_on_launch = true
ags = {>
>   tags = {
me      >     Name        = "${var.environment}-public-subnet-${count.index + 1}"
nvironm>     Environment = var.environment
}
}

/>   }
> }
>
> // Private subnets
> resource "aws_subnet" "private" {
>   count             = length(var.private_subnet_cidrs)
>   vpc_id            = aws_vpc.main.id
>   cidr_block        = var.private_subnet_cidrs[count.index]
vailabil>   availability_zone = var.availability_zones[count.index]
>
>   tags = {
>     Name        = "${var.environment}-private-subnet-${count.index + 1}"
>     Environment = var.environment
}
}

/>   }
> }
>
> // Internet Gateway
ource "> resource "aws_internet_gateway" "igw" {
>   vpc_id = aws_vpc.main.id
>
>   tags = {
>     Name        = "${var.environment}-igw"
>     Environment = var.environment
>   }
> }
>
> // Elastic IP for NAT Gateway
ce "aws> resource "aws_eip" "nat" {
>   domain = "vpc"

  tags >
>   tags = {
 Name  >     Name        = "${var.environment}-eip"
  Envir>     Environment = var.environment
>   }
> }
>
> // NAT Gateway
ource "> resource "aws_nat_gateway" "nat" {
>   allocation_id = aws_eip.nat.id
et_id  >   subnet_id     = aws_subnet.public[0].id

  tags >
>   tags = {
>     Name        = "${var.environment}-nat"
>     Environment = var.environment
>   }
>
>   depends_on = [aws_internet_gateway.igw]


// Ro> }
>
> // Route table for public subnets
ource "> resource "aws_route_table" "public" {
>   vpc_id = aws_vpc.main.id
>
>   route {
>     cidr_block = "0.0.0.0/0"
>     gateway_id = aws_internet_gateway.igw.id
>   }
>
>   tags = {
me      >     Name        = "${var.environment}-public-route-table"
>     Environment = var.environment
>   }
> }
>
> // Route table for private subnets
> resource "aws_route_table" "private" {
 vpc_id>   vpc_id = aws_vpc.main.id
>
>   route {
dr_bloc>     cidr_block     = "0.0.0.0/0"
>     nat_gateway_id = aws_nat_gateway.nat.id
}

  >   }
>
>   tags = {
ame     >     Name        = "${var.environment}-private-route-table"
nvironm>     Environment = var.environment
}
}

/>   }
> }
>
> // Route table association for public subnets
> resource "aws_route_table_association" "public" {
>   count          = length(var.public_subnet_cidrs)
>   subnet_id      = aws_subnet.public[count.index].id
route_t>   route_table_id = aws_route_table.public.id
> }
>
> // Route table association for private subnets
> resource "aws_route_table_association" "private" {
>   count          = length(var.private_subnet_cidrs)
subnet_>   subnet_id      = aws_subnet.private[count.index].id
route_t>   route_table_id = aws_route_table.private.id
}

// S> }
>
> // Security group for load balancer
e "aws_> resource "aws_security_group" "lb" {
>   name        = "${var.environment}-alb-sg"
descript>   description = "Security group for the application load balancer"
c_id   >   vpc_id      = aws_vpc.main.id

  ingre>
>   ingress {
>     from_port   = 80
>     to_port     = 80
>     protocol    = "tcp"
>     cidr_blocks = ["0.0.0.0/0"]
 }

 >   }
>
>   egress {
rom_por>     from_port   = 0
    to_>     to_port     = 0
>     protocol    = "-1"
>     cidr_blocks = ["0.0.0.0/0"]
>   }
>
>   tags = {
>     Name        = "${var.environment}-alb-sg"
>     Environment = var.environment

}

// >   }
> }
>
> // Security group for ECS tasks
> resource "aws_security_group" "ecs" {
>   name        = "${var.environment}-ecs-sg"
>   description = "Security group for the ECS tasks"
>   vpc_id      = aws_vpc.main.id
>
>   ingress {
>     from_port       = 0
>     to_port         = 0
>     protocol        = "-1"
>     security_groups = [aws_security_group.lb.id]
>   }
>
>   egress {
>     from_port   = 0
  to_po>     to_port     = 0
rotocol >     protocol    = "-1"
cidr_bl>     cidr_blocks = ["0.0.0.0/0"]
 }

 >   }
>
>   tags = {
>     Name        = "${var.environment}-ecs-sg"
>     Environment = var.environment
>   }
> }
> EOF
eate modules/networking/variables.tf
cat > modules/networking/variables.tf << 'EOF'
variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
}

variable "public_subnet_cidrs" {
  description = "CIDR blocks for the public subnets"
  type        = list(string)
}

variable "private_subnet_cidrs" {
  description = "CIDR blocks for the private subnets"
  type        = list(string)
}

variable "availability_zones" {
  description = "Availability zones for the subnets"
  type        = list(string)
}

variable "environment" {
  description = "The deployment environmrae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create modules/networking/variables.tf
ent"
  rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > modules/networking/variables.tf << 'EOF'
> variable "vpc_cidr" {
>   description = "CIDR block for the VPC"
>   type        = string
> }
>
> variable "public_subnet_cidrs" {
>   description = "CIDR blocks for the public subnets"
>   type        = list(string)
> }
>
> variable "private_subnet_cidrs" {
>   description = "CIDR blocks for the private subnets"
>   type        = list(string)
> }
>
> variable "availability_zones" {
>   description = "Availability zones for the subnets"
>   type        = list(string)
> }
>
> variable "environment" {
>   description = "The deployment environment"
>   type        = string
 securit> }
> EOF

  value       = aws_security_group.lb.id
}

output "ecs_security_group_id" {
  description = "The ID of the ECS security group"
  value       = aws_security_group.ecs.id
}
EOFrae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create modules/networking/outputs.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > modules/networking/outputs.tf << 'EOF'
> output "vpc_id" {
>   description = "The ID of the VPC"
>   value       = aws_vpc.main.id
> }
>
> output "public_subnet_ids" {
>   description = "The IDs of the public subnets"
>   value       = aws_subnet.public[*].id
> }
>
> output "private_subnet_ids" {
>   description = "The IDs of the private subnets"
>   value       = aws_subnet.private[*].id
> }
>
> output "alb_security_group_id" {
>   description = "The ID of the ALB security group"
>   value       = aws_security_group.lb.id
> }
>
> output "ecs_security_group_id" {
>   description = "The ID of the ECS security group"
>   value       = aws_security_group.ecs.id
> }
> EOF
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create modules/ecr/main.tf
at > morae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > modules/ecr/main.tf << 'EOF'
// ECR> // ECR module for container repositories
>
> resource "aws_ecr_repository" "app" {
>   for_each = toset(var.repository_names)

  name>
>   name = "${var.environment}-${each.key}"
>
>   image_scanning_configuration {
>     scan_on_push = true


  t>   }
>
>   tags = {
me      >     Name        = "${var.environment}-${each.key}"
 Enviro>     Environment = var.environment
>   }

resourc> }
>
> resource "aws_ecr_lifecycle_policy" "app" {
>   for_each = toset(var.repository_names)
>
>   repository = aws_ecr_repository.app[each.key].name
>
>   policy = jsonencode({
>     rules = [
>       {
>         rulePriority = 1
>         description  = "Keep last 5 images"
 selecti>         selection = {
        >           tagStatus     = "any"
     cou>           countType     = "imageCountMoreThan"
        >           countNumber   = 5
>         }
>         action = {
      ty>           type = "expire"
>         }
>       }
>     ]
>   })
F

# C> }
reate m> EOF
odules/ecr/variables.tf
cat > modules/ecr/variables.tf << 'EOF'
variable "repository_names" {
  description = "Names of the ECR repositories to create"
  type        = list(string)
}rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create modules/ecr/variables.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > modules/ecr/variables.tf << 'EOF'
> variable "repository_names" {


varia>   description = "Names of the ECR repositories to create"
>   type        = list(string)
> }
>
> variable "environment" {
>   description = "The deployment environment"
>   type        = string

EOF
> }
> EOF

# Create modules/ecr/outputs.tf
cat > modules/ecr/outputs.tf << 'EOF'
output "repository_urls" {
  description = "The URLs of the ECrae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
R reposrae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Create modules/ecr/outputs.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cat > modules/ecr/outputs.tf << 'EOF'
> output "repository_urls" {
>   description = "The URLs of the ECR repositories"
>   value       = { for name in var.repository_names : name => aws_ecr_repository.app[name].repository_url }
> }
> EOF
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Initialize Terraform (downloads providers and modules)
rraform rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ terraform init
 Plan (see what changes will be made)
terraform plan -var="container_image=nginx:latest" -out=tfplan

# Apply (create the resources)
terraform apply tfplan
Initializing the backend...
Initializing modules...
- ecr in modules/ecr
- ecs in modules/ecs
- networking in modules/networking
Initializing provider plugins...
- Finding hashicorp/aws versions matching "~> 5.0"...
- Installing hashicorp/aws v5.94.0...
- Installed hashicorp/aws v5.94.0 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ # Plan (see what changes will be made)
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ terraform plan -var="container_image=nginx:latest" -out=tfplan
