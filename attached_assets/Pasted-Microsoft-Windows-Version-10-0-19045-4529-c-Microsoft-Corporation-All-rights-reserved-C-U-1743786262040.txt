Microsoft Windows [Version 10.0.19045.4529]
(c) Microsoft Corporation. All rights reserved.

C:\Users\KHARDZ>cd desktop

C:\Users\KHARDZ\Desktop>cd week 3

C:\Users\KHARDZ\Desktop\Week 3>wsl
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3$ cd Oaktree
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ cd Terraform
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # Pumunta sa terraform directory
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ cd terraform
# I-initialize ang Terraform
terrafor-bash: cd: terraform: No such file or directory
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # I-initialize ang Terraform
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ terraform init
 Check ang plan
terraform plan
# I-apply ang changes
terraform apply
Initializing the backend...
Initializing modules...
- ecr in modules/ecr
- ecs in modules/ecs
- networking in modules/networking
╷
│ Error: Duplicate provider configuration
│
│   on providers.tf line 2:
│    2: provider "aws" {
│
│ A default (non-aliased) provider configuration for "aws" was already given at main.tf:1,1-15. If multiple
│ configurations are required, set the "alias" argument for alternative configurations.
╵
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # Check ang plan
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ terraform plan
╷
│ Error: Duplicate provider configuration
│
│   on providers.tf line 2:
│    2: provider "aws" {
│
│ A default (non-aliased) provider configuration for "aws" was already given at main.tf:1,1-15. If multiple
│ configurations are required, set the "alias" argument for alternative configurations.
╵
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # I-apply ang changes
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ terraform apply
╷
│ Error: Duplicate provider configuration
│
│   on providers.tf line 2:
│    2: provider "aws" {
│
│ A default (non-aliased) provider configuration for "aws" was already given at main.tf:1,1-15. If multiple
│ configurations are required, set the "alias" argument for alternative configurations.
╵
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ cat providers.tf
# Configure AWS Provider
provider "aws" {
  region = var.aws_region
}

# Required Terraform version
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }

  required_version = ">= 1.2.0"
}
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # Backup muna
cp provirae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ cp providers.tf providers.tf.backup
Tanggalin ang laman ng providers.tf (dahil nasa main.tf na)
> providers.tfrae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # Tanggalin ang laman ng providers.tf (dahil nasa main.tf na)
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ > providers.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # Tignan ang laman ng main.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ cat main.tf
I-edit ang main.tf para idagdag ang settings mula sa providers.tf
# Pagkatapos, delete ang providers.tf
rm providers.tfprovider "aws" {
  region = var.aws_region
}

# Networking module
module "networking" {
  source = "./modules/networking"

  environment     = var.environment
  vpc_cidr        = var.vpc_cidr
  azs             = var.azs
  public_subnets  = var.public_subnets
  private_subnets = var.private_subnets

  tags = var.tags
}

# ECR module
module "ecr" {
  source = "./modules/ecr"

  environment     = var.environment
  repository_name = var.ecr_repository_name

  tags = var.tags
}

# ECS module
module "ecs" {
  source = "./modules/ecs"

  environment         = var.environment
  ecr_repository_url  = module.ecr.repository_url
  vpc_id              = module.networking.vpc_id
  public_subnet_ids   = module.networking.public_subnet_ids
  private_subnet_ids  = module.networking.private_subnet_ids
  app_port            = var.app_port
  health_check_path   = var.health_check_path
  container_memory    = var.container_memory
  container_cpu       = var.container_cpu
  desired_count       = var.desired_count
  max_count           = var.max_count
  min_count           = var.min_count
  service_name        = var.service_name

  tags = var.tags
}
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # I-edit ang main.tf para idagdag ang settings mula sa providers.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # Pagkatapos, delete ang providers.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ rm providers.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ terraform init
erraform planInitializing the backend...

Initializing modules...
Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.94.0...
- Installed hashicorp/aws v5.94.0 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ terraform plan


module.ecs.data.aws_region.current: Reading...
module.ecs.data.aws_region.current: Read complete after 0s [id=us-east-1]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with
the following symbols:
  + create

Terraform will perform the following actions:

  # module.ecr.aws_ecr_lifecycle_policy.main will be created
  + resource "aws_ecr_lifecycle_policy" "main" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 5 images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 5
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "any"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloud-app-dashboard"
    }

  # module.ecr.aws_ecr_repository.main will be created
  + resource "aws_ecr_repository" "main" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "cloud-app-dashboard"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-cloud-app-dashboard"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "Name"        = "dev-cloud-app-dashboard"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecs.aws_appautoscaling_policy.ecs_policy_cpu will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-cluster/cloud-app-dashboard-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.ecs.aws_appautoscaling_policy.ecs_policy_memory will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_memory" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-memory-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-cluster/cloud-app-dashboard-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageMemoryUtilization"
            }
        }
    }

  # module.ecs.aws_appautoscaling_target.ecs_target will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 4
      + min_capacity       = 1
      + resource_id        = "service/dev-cluster/cloud-app-dashboard-service"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = (known after apply)

      + suspended_state (known after apply)
    }

  # module.ecs.aws_cloudwatch_log_group.app will be created
  + resource "aws_cloudwatch_log_group" "app" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev-app"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "dev-log-group"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "Name"        = "dev-log-group"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
    }

  # module.ecs.aws_ecs_cluster.main will be created
  + resource "aws_ecs_cluster" "main" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "dev-cluster"
      + tags     = {
          + "Environment" = "dev"
          + "Name"        = "dev-cluster"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "Name"        = "dev-cluster"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }

      + setting {
          + name  = "containerInsights"
          + value = "enabled"
        }
    }

  # module.ecs.aws_ecs_service.app will be created
  + resource "aws_ecs_service" "app" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "cloud-app-dashboard-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Environment" = "dev"
          + "Name"        = "dev-service"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-service"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + deployment_controller {
          + type = "ECS"
        }

      + load_balancer {
          + container_name   = "dev-app"
          + container_port   = 3000
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.ecs.aws_ecs_task_definition.app will be created
  + resource "aws_ecs_task_definition" "app" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "256"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-app"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Environment" = "dev"
          + "Name"        = "dev-task-def"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-task-def"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.ecs.aws_iam_role.ecs_execution will be created
  + resource "aws_iam_role" "ecs_execution" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-ecs-execution-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.ecs.aws_iam_role.ecs_task will be created
  + resource "aws_iam_role" "ecs_task" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-ecs-task-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.ecs.aws_iam_role_policy_attachment.ecs_execution will be created
  + resource "aws_iam_role_policy_attachment" "ecs_execution" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      + role       = "dev-ecs-execution-role"
    }

  # module.ecs.aws_lb.main will be created
  + resource "aws_lb" "main" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "dev-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags                                                         = {
          + "Environment" = "dev"
          + "Name"        = "dev-alb"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                                     = {
          + "Environment" = "dev"
          + "Name"        = "dev-alb"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # module.ecs.aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = (known after apply)
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # module.ecs.aws_lb_target_group.app will be created
  + resource "aws_lb_target_group" "app" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-target-group"
      + name_prefix                        = (known after apply)
      + port                               = 3000
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Environment" = "dev"
          + "Name"        = "dev-target-group"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-target-group"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 60
          + matcher             = "200-299"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 30
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.ecs.aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "Security group for the application load balancer"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "dev-alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "dev-alb-sg"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "dev-alb-sg"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.ecs.aws_security_group.ecs_tasks will be created
  + resource "aws_security_group" "ecs_tasks" {
      + arn                    = (known after apply)
      + description            = "Security group for the ECS tasks"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 3000
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "dev-ecs-tasks-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "dev-ecs-tasks-sg"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "dev-ecs-tasks-sg"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.networking.aws_eip.nat will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-nat-eip"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "Name"        = "dev-nat-eip"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc                  = (known after apply)
    }

  # module.networking.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "dev"
          + "Name"        = "dev-igw"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "Name"        = "dev-igw"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id   = (known after apply)
    }

  # module.networking.aws_nat_gateway.nat will be created
  + resource "aws_nat_gateway" "nat" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Environment" = "dev"
          + "Name"        = "dev-nat-gateway"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-nat-gateway"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
    }

  # module.networking.aws_route_table.private will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-route-table"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-route-table"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id           = (known after apply)
    }

  # module.networking.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-route-table"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-route-table"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id           = (known after apply)
    }

  # module.networking.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-subnet-1"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-subnet-1"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-subnet-2"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-subnet-2"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-subnet-1"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-subnet-1"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-subnet-2"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-subnet-2"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-vpc"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                             = {
          + "Environment" = "dev"
          + "Name"        = "dev-vpc"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
    }

Plan: 31 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + app_url             = (known after apply)
  + ecr_repository_name = "cloud-app-dashboard"
  + ecr_repository_url  = (known after apply)
  + ecs_cluster_name    = "dev-cluster"
  + ecs_service_name    = "cloud-app-dashboard-service"
  + private_subnet_ids  = [
      + (known after apply),
      + (known after apply),
    ]
  + public_subnet_ids   = [
      + (known after apply),
      + (known after apply),
    ]
  + vpc_id              = (known after apply)

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions
if you run "terraform apply" now.
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ terraform apply
╷
│ Error: timeout while waiting for plugin to start
│
│
╵
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ terraform init -upgrade
Initializing the backend...
Upgrading modules...
- ecr in modules/ecr
- ecs in modules/ecs
- networking in modules/networking
Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Using previously-installed hashicorp/aws v5.94.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ terraform apply
module.ecs.data.aws_region.current: Reading...
module.ecs.data.aws_region.current: Read complete after 1s [id=us-east-1]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with
the following symbols:
  + create

Terraform will perform the following actions:

  # module.ecr.aws_ecr_lifecycle_policy.main will be created
  + resource "aws_ecr_lifecycle_policy" "main" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 5 images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 5
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "any"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloud-app-dashboard"
    }

  # module.ecr.aws_ecr_repository.main will be created
  + resource "aws_ecr_repository" "main" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "cloud-app-dashboard"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-cloud-app-dashboard"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "Name"        = "dev-cloud-app-dashboard"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecs.aws_appautoscaling_policy.ecs_policy_cpu will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-cluster/cloud-app-dashboard-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.ecs.aws_appautoscaling_policy.ecs_policy_memory will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_memory" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-memory-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-cluster/cloud-app-dashboard-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageMemoryUtilization"
            }
        }
    }

  # module.ecs.aws_appautoscaling_target.ecs_target will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 4
      + min_capacity       = 1
      + resource_id        = "service/dev-cluster/cloud-app-dashboard-service"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = (known after apply)

      + suspended_state (known after apply)
    }

  # module.ecs.aws_cloudwatch_log_group.app will be created
  + resource "aws_cloudwatch_log_group" "app" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev-app"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "dev-log-group"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "Name"        = "dev-log-group"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
    }

  # module.ecs.aws_ecs_cluster.main will be created
  + resource "aws_ecs_cluster" "main" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "dev-cluster"
      + tags     = {
          + "Environment" = "dev"
          + "Name"        = "dev-cluster"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "Name"        = "dev-cluster"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }

      + setting {
          + name  = "containerInsights"
          + value = "enabled"
        }
    }

  # module.ecs.aws_ecs_service.app will be created
  + resource "aws_ecs_service" "app" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "cloud-app-dashboard-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Environment" = "dev"
          + "Name"        = "dev-service"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-service"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + deployment_controller {
          + type = "ECS"
        }

      + load_balancer {
          + container_name   = "dev-app"
          + container_port   = 3000
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.ecs.aws_ecs_task_definition.app will be created
  + resource "aws_ecs_task_definition" "app" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "256"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-app"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Environment" = "dev"
          + "Name"        = "dev-task-def"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-task-def"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.ecs.aws_iam_role.ecs_execution will be created
  + resource "aws_iam_role" "ecs_execution" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-ecs-execution-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.ecs.aws_iam_role.ecs_task will be created
  + resource "aws_iam_role" "ecs_task" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-ecs-task-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.ecs.aws_iam_role_policy_attachment.ecs_execution will be created
  + resource "aws_iam_role_policy_attachment" "ecs_execution" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      + role       = "dev-ecs-execution-role"
    }

  # module.ecs.aws_lb.main will be created
  + resource "aws_lb" "main" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "dev-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags                                                         = {
          + "Environment" = "dev"
          + "Name"        = "dev-alb"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                                     = {
          + "Environment" = "dev"
          + "Name"        = "dev-alb"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # module.ecs.aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = (known after apply)
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # module.ecs.aws_lb_target_group.app will be created
  + resource "aws_lb_target_group" "app" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-target-group"
      + name_prefix                        = (known after apply)
      + port                               = 3000
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Environment" = "dev"
          + "Name"        = "dev-target-group"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-target-group"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 60
          + matcher             = "200-299"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 30
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.ecs.aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "Security group for the application load balancer"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "dev-alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "dev-alb-sg"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "dev-alb-sg"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.ecs.aws_security_group.ecs_tasks will be created
  + resource "aws_security_group" "ecs_tasks" {
      + arn                    = (known after apply)
      + description            = "Security group for the ECS tasks"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 3000
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "dev-ecs-tasks-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "dev-ecs-tasks-sg"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "dev-ecs-tasks-sg"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.networking.aws_eip.nat will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-nat-eip"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "Name"        = "dev-nat-eip"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc                  = (known after apply)
    }

  # module.networking.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "dev"
          + "Name"        = "dev-igw"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "Name"        = "dev-igw"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id   = (known after apply)
    }

  # module.networking.aws_nat_gateway.nat will be created
  + resource "aws_nat_gateway" "nat" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Environment" = "dev"
          + "Name"        = "dev-nat-gateway"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-nat-gateway"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
    }

  # module.networking.aws_route_table.private will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-route-table"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-route-table"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id           = (known after apply)
    }

  # module.networking.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-route-table"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-route-table"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id           = (known after apply)
    }

  # module.networking.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.networking.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-subnet-1"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-subnet-1"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-subnet-2"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-private-subnet-2"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-subnet-1"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-subnet-1"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-subnet-2"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-public-subnet-2"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.networking.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-vpc"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
      + tags_all                             = {
          + "Environment" = "dev"
          + "Name"        = "dev-vpc"
          + "Project"     = "cloud-app-dashboard"
          + "Terraform"   = "true"
        }
    }

Plan: 31 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + app_url             = (known after apply)
  + ecr_repository_name = "cloud-app-dashboard"
  + ecr_repository_url  = (known after apply)
  + ecs_cluster_name    = "dev-cluster"
  + ecs_service_name    = "cloud-app-dashboard-service"
  + private_subnet_ids  = [
      + (known after apply),
      + (known after apply),
    ]
  + public_subnet_ids   = [
      + (known after apply),
      + (known after apply),
    ]
  + vpc_id              = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.networking.aws_vpc.main: Creating...
module.ecs.aws_cloudwatch_log_group.app: Creating...
module.networking.aws_eip.nat: Creating...
module.ecs.aws_iam_role.ecs_execution: Creating...
module.ecr.aws_ecr_repository.main: Creating...
module.ecs.aws_iam_role.ecs_task: Creating...
module.ecs.aws_ecs_cluster.main: Creating...
module.ecr.aws_ecr_repository.main: Creation complete after 2s [id=cloud-app-dashboard]
module.ecr.aws_ecr_lifecycle_policy.main: Creating...
module.ecs.aws_cloudwatch_log_group.app: Creation complete after 2s [id=/ecs/dev-app]
module.ecs.aws_iam_role.ecs_task: Creation complete after 3s [id=dev-ecs-task-role]
module.ecs.aws_iam_role.ecs_execution: Creation complete after 3s [id=dev-ecs-execution-role]
module.ecr.aws_ecr_lifecycle_policy.main: Creation complete after 1s [id=cloud-app-dashboard]
module.ecs.aws_iam_role_policy_attachment.ecs_execution: Creating...
module.ecs.aws_ecs_task_definition.app: Creating...
module.ecs.aws_iam_role_policy_attachment.ecs_execution: Creation complete after 0s [id=dev-ecs-execution-role-20250404164720963000000001]
module.ecs.aws_ecs_task_definition.app: Creation complete after 0s [id=dev-app]
module.networking.aws_eip.nat: Creation complete after 4s [id=eipalloc-0065a0449dfdda37a]
module.networking.aws_vpc.main: Still creating... [10s elapsed]
module.ecs.aws_ecs_cluster.main: Still creating... [10s elapsed]
module.ecs.aws_ecs_cluster.main: Creation complete after 13s [id=arn:aws:ecs:us-east-1:321225686735:cluster/dev-cluster]
module.networking.aws_vpc.main: Creation complete after 16s [id=vpc-0ed30a817d128925a]
module.networking.aws_subnet.public[1]: Creating...
module.networking.aws_internet_gateway.igw: Creating...
module.networking.aws_subnet.private[0]: Creating...
module.networking.aws_subnet.public[0]: Creating...
module.networking.aws_subnet.private[1]: Creating...
module.ecs.aws_security_group.alb: Creating...
module.ecs.aws_lb_target_group.app: Creating...
module.networking.aws_subnet.private[0]: Creation complete after 2s [id=subnet-03ed24fbd400780d2]
module.networking.aws_subnet.private[1]: Creation complete after 2s [id=subnet-00abadc7d5e7012bf]
module.networking.aws_internet_gateway.igw: Creation complete after 2s [id=igw-0f5cd8b719f99f9ec]
module.networking.aws_route_table.public: Creating...
module.ecs.aws_lb_target_group.app: Creation complete after 4s [id=arn:aws:elasticloadbalancing:us-east-1:321225686735:targetgroup/dev-target-group/92585add253d9ca8]
module.networking.aws_route_table.public: Creation complete after 3s [id=rtb-087c09ca778e0dde2]
module.ecs.aws_security_group.alb: Creation complete after 5s [id=sg-0d31ff77c7db4b054]
module.ecs.aws_security_group.ecs_tasks: Creating...
module.networking.aws_subnet.public[1]: Still creating... [10s elapsed]
module.networking.aws_subnet.public[0]: Still creating... [10s elapsed]
module.ecs.aws_security_group.ecs_tasks: Creation complete after 5s [id=sg-09b9f0fba7b8e8656]
module.networking.aws_subnet.public[1]: Creation complete after 12s [id=subnet-025c85e4d6e79a8a3]
module.networking.aws_subnet.public[0]: Creation complete after 12s [id=subnet-01df9cd3ec465d088]
module.networking.aws_route_table_association.public[0]: Creating...
module.networking.aws_route_table_association.public[1]: Creating...
module.networking.aws_nat_gateway.nat: Creating...
module.ecs.aws_lb.main: Creating...
module.networking.aws_route_table_association.public[0]: Creation complete after 2s [id=rtbassoc-003142420e32b8036]
module.networking.aws_route_table_association.public[1]: Creation complete after 2s [id=rtbassoc-04e34af2888e56a89]
module.networking.aws_nat_gateway.nat: Still creating... [11s elapsed]
module.ecs.aws_lb.main: Still creating... [11s elapsed]
module.networking.aws_nat_gateway.nat: Still creating... [21s elapsed]
module.ecs.aws_lb.main: Still creating... [21s elapsed]
module.networking.aws_nat_gateway.nat: Still creating... [31s elapsed]
module.ecs.aws_lb.main: Still creating... [31s elapsed]
module.networking.aws_nat_gateway.nat: Still creating... [42s elapsed]
module.ecs.aws_lb.main: Still creating... [42s elapsed]
module.networking.aws_nat_gateway.nat: Still creating... [52s elapsed]
module.ecs.aws_lb.main: Still creating... [52s elapsed]
module.networking.aws_nat_gateway.nat: Still creating... [1m2s elapsed]
module.ecs.aws_lb.main: Still creating... [1m2s elapsed]
module.networking.aws_nat_gateway.nat: Still creating... [1m13s elapsed]
module.ecs.aws_lb.main: Still creating... [1m13s elapsed]
module.networking.aws_nat_gateway.nat: Still creating... [1m23s elapsed]
module.ecs.aws_lb.main: Still creating... [1m23s elapsed]
module.networking.aws_nat_gateway.nat: Still creating... [1m33s elapsed]
module.ecs.aws_lb.main: Still creating... [1m33s elapsed]
module.networking.aws_nat_gateway.nat: Creation complete after 1m41s [id=nat-0d4b52d0c293c5167]
module.networking.aws_route_table.private: Creating...
module.networking.aws_route_table.private: Creation complete after 3s [id=rtb-0b24a4fac170b4e21]
module.networking.aws_route_table_association.private[0]: Creating...
module.networking.aws_route_table_association.private[1]: Creating...
module.ecs.aws_lb.main: Still creating... [1m44s elapsed]
module.networking.aws_route_table_association.private[0]: Creation complete after 1s [id=rtbassoc-01cddc7b90ed42aa0]
module.networking.aws_route_table_association.private[1]: Creation complete after 2s [id=rtbassoc-0a6b5665978509ca1]
module.ecs.aws_lb.main: Still creating... [1m54s elapsed]
module.ecs.aws_lb.main: Still creating... [2m4s elapsed]
module.ecs.aws_lb.main: Still creating... [2m15s elapsed]
module.ecs.aws_lb.main: Still creating... [2m25s elapsed]
module.ecs.aws_lb.main: Still creating... [2m35s elapsed]
module.ecs.aws_lb.main: Still creating... [2m45s elapsed]
module.ecs.aws_lb.main: Still creating... [2m56s elapsed]
module.ecs.aws_lb.main: Creation complete after 3m3s [id=arn:aws:elasticloadbalancing:us-east-1:321225686735:loadbalancer/app/dev-alb/9b3f234690e8fb88]
module.ecs.aws_lb_listener.http: Creating...
module.ecs.aws_lb_listener.http: Creation complete after 2s [id=arn:aws:elasticloadbalancing:us-east-1:321225686735:listener/app/dev-alb/9b3f234690e8fb88/8a10a4da48db78cd]
module.ecs.aws_ecs_service.app: Creating...
module.ecs.aws_ecs_service.app: Creation complete after 3s [id=arn:aws:ecs:us-east-1:321225686735:service/dev-cluster/cloud-app-dashboard-service]
module.ecs.aws_appautoscaling_target.ecs_target: Creating...
╷
│ Error: listing tags for Application Auto Scaling Target (arn:aws:application-autoscaling:us-east-1:321225686735:scalable-target/0ec553b55a4daf0a4179ba174156a4c0f495): operation error Application Auto Scaling: ListTagsForResource, https response error StatusCode: 400, RequestID: 5846be41-300e-43aa-a91d-02a23deac44a, api error AccessDeniedException: User: arn:aws:iam::321225686735:user/draiimon is not authorized to perform: application-autoscaling:ListTagsForResource on resource: arn:aws:application-autoscaling:us-east-1:321225686735:scalable-target/0ec553b55a4daf0a4179ba174156a4c0f495 because no identity-based policy allows the application-autoscaling:ListTagsForResource action
│
│   with module.ecs.aws_appautoscaling_target.ecs_target,
│   on modules/ecs/main.tf line 283, in resource "aws_appautoscaling_target" "ecs_target":
│  283: resource "aws_appautoscaling_target" "ecs_target" {
│
╵
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ cd /mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform
-bash: cd: too many arguments
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ terraform output
app_url = "http://dev-alb-1741821292.us-east-1.elb.amazonaws.com"
ecr_repository_name = "cloud-app-dashboard"
ecr_repository_url = "321225686735.dkr.ecr.us-east-1.amazonaws.com/cloud-app-dashboard"
ecs_cluster_name = "dev-cluster"
ecs_service_name = "cloud-app-dashboard-service"
private_subnet_ids = [
  "subnet-03ed24fbd400780d2",
  "subnet-00abadc7d5e7012bf",
]
public_subnet_ids = [
  "subnet-01df9cd3ec465d088",
  "subnet-025c85e4d6e79a8a3",
]
vpc_id = "vpc-0ed30a817d128925a"
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ # Separate commands para iwas error sa path
 /mnt/c/rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/Terraform$ cd /mnt/c/Users/KHARDZ/Desktop
"Week 3"
cd Oaktree

ECR_URL=321225686735.dkr.ecr.us-east-1.amazonaws.com/cloud-app-dashboard

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 321225686735.dkr.ecr.us-east-1.amazonrae@Rae:/mnt/c/Users/KHARDZ/Desktop$ cd "Week 3"

docker build -t cloud-app-dashboard .
docker tag cloud-app-dashboard:latest $ECR_URL:rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3$ cd Oaktree
ocker push $ECR_URL:latestrae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ ECR_URL=321225686735.dkr.ecr.us-east-1.amazonaws.com/cloud-app-dashboard
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 321225686735.dkr.ecr.us-east-1.amazonaws.com

[+] Building 27.5s (10/10) FINISHED                                                                   docker:default
 => [internal] load build definition from Dockerfile                                                            0.2s
 => => transferring dockerfile: 183B                                                                            0.1s
 => [internal] load metadata for docker.io/library/node:20-alpine                                               3.2s
 => [internal] load .dockerignore                                                                               0.1s
 => => transferring context: 80B                                                                                0.0s
 => [1/5] FROM docker.io/library/node:20-alpine@sha256:8bda036ddd59ea51a23bc1a1035d3b5c614e72c01366d989f4120e  13.7s
 => => resolve docker.io/library/node:20-alpine@sha256:8bda036ddd59ea51a23bc1a1035d3b5c614e72c01366d989f4120e8  0.1s
 => => sha256:8bda036ddd59ea51a23bc1a1035d3b5c614e72c01366d989f4120e8adca196d4 7.67kB / 7.67kB                  0.0s
 => => sha256:37a5a350292926f98d48de9af160b0a3f7fcb141566117ee452742739500a5bd 1.72kB / 1.72kB                  0.0s
 => => sha256:5885a9462a2f940d7b54cb56ee6eee1943d7fbdcbf0cc1fdf074cf3eab807241 6.18kB / 6.18kB                  0.0s
 => => sha256:8cc209e5911cb71400e7dcbfccf23b57aebf6f4a308f6870a67d99d464426e2e 42.95MB / 42.95MB                2.7s
 => => sha256:d7a069a788e09c70b6e7bd23a40de8714784738174cb975e7a9a20f3ae2be24b 1.26MB / 1.26MB                  1.0s
 => => sha256:42ec265e2954eaadbe3a9ad5bb4b55b8713189b49ad9cc1c0c9eac64ec479363 449B / 449B                      1.0s
 => => extracting sha256:8cc209e5911cb71400e7dcbfccf23b57aebf6f4a308f6870a67d99d464426e2e                       9.2s
 => => extracting sha256:d7a069a788e09c70b6e7bd23a40de8714784738174cb975e7a9a20f3ae2be24b                       0.3s
 => => extracting sha256:42ec265e2954eaadbe3a9ad5bb4b55b8713189b49ad9cc1c0c9eac64ec479363                       0.0s
 => [internal] load build context                                                                              15.4s
 => => transferring context: 2.33MB                                                                            15.4s
 => [2/5] WORKDIR /app                                                                                          0.9s
 => [3/5] COPY app/package*.json ./                                                                             0.2s
 => [4/5] RUN npm install --production                                                                          7.3s
 => [5/5] COPY app/ ./                                                                                          0.4s
 => exporting to image                                                                                          0.5s
 => => exporting layers                                                                                         0.5s
 => => writing image sha256:d4018c593a288bca342f86356b4815d5839bedfbc3210da340cde1bb9814ac3a                    0.0s
 => => naming to docker.io/library/cloud-app-dashboard                                                          0.0s
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ docker tag cloud-app-dashboard:latest $ECR_URL:latest
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$ docker push $ECR_URL:latest
The push refers to repository [321225686735.dkr.ecr.us-east-1.amazonaws.com/cloud-app-dashboard]
34d4e7f7b260: Pushed
33827a03abef: Pushed
77e87d9e6541: Pushed
e725337f7d46: Pushed
71966995f05c: Pushed
31d5ff869df5: Pushed
4f35fe5263c7: Pushed
08000c18d16d: Pushed
latest: digest: sha256:f46b7026776a7a6bceba110b48819dd3cafd6e7dff07b5cec6295434b806d86f size: 1993
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree$




