rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/terraform$ terraform validate
Success! The configuration is valid.

rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/terraform$ nano terraform.tfvars
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/terraform$ terraform apply
module.ecs.aws_iam_role.task_execution_role: Refreshing state... [id=cloud-app-dev-execution-role]
module.networking.aws_subnet.private[1]: Refreshing state... [id=subnet-0aebef85407799d94]
module.networking.aws_route_table_association.public[1]: Refreshing state... [id=rtbassoc-0212aa5b6382dab27]
module.ecs.aws_security_group.ecs_tasks: Refreshing state... [id=sg-0ffb45f9cd8aecde7]
module.networking.aws_route_table.private[0]: Refreshing state... [id=rtb-0c2c2191f7ccd2998]
module.ecs.aws_iam_role_policy_attachment.task_execution_role_policy: Refreshing state... [id=cloud-app-dev-execution-role-20250404124316627600000001]
module.networking.aws_route_table_association.private[1]: Refreshing state... [id=rtbassoc-0f3ce5a7973b8ecdb]
module.ecs.aws_ecs_service.app: Refreshing state... [id=arn:aws:ecs:us-west-2:321225686735:service/cloud-app-dev-cluster/cloud-app-dev-service]
module.networking.aws_subnet.private[0]: Refreshing state... [id=subnet-02fc8ae5a286d86eb]
module.networking.aws_eip.nat[0]: Refreshing state... [id=eipalloc-0406c3c56c6a65eee]
module.networking.aws_route_table_association.private[0]: Refreshing state... [id=rtbassoc-07e524a77d0374c65]
module.networking.aws_nat_gateway.main[0]: Refreshing state... [id=nat-0c767a62bad3ac014]
module.ecs.aws_lb_listener.http: Refreshing state... [id=arn:aws:elasticloadbalancing:us-west-2:321225686735:listener/app/cloud-app-dev-alb/d1ce9da24274bb2f/0480847e87230e0a]
module.networking.aws_route_table.private[1]: Refreshing state... [id=rtb-01dbe7ec9bc4552be]
module.networking.aws_vpc.main: Refreshing state... [id=vpc-0a0ff425cfdd05199]
module.networking.aws_route_table_association.public[0]: Refreshing state... [id=rtbassoc-04d87533e6cb58c81]
module.ecs.aws_lb_target_group.app: Refreshing state... [id=arn:aws:elasticloadbalancing:us-west-2:321225686735:targetgroup/cloud-app-dev-tg/796dfc8afca7261e]
module.ecs.aws_iam_role.task_role: Refreshing state... [id=cloud-app-dev-task-role]
module.ecs.aws_security_group.alb: Refreshing state... [id=sg-0a61c755d5b7c8bf7]
module.ecs.aws_cloudwatch_log_group.app_logs: Refreshing state... [id=/ecs/cloud-app-dev]
module.networking.aws_subnet.public[0]: Refreshing state... [id=subnet-00ce3ca1d2f9e7a94]
module.ecs.aws_lb.main: Refreshing state... [id=arn:aws:elasticloadbalancing:us-west-2:321225686735:loadbalancer/app/cloud-app-dev-alb/d1ce9da24274bb2f]
module.ecr.aws_ecr_lifecycle_policy.app: Refreshing state... [id=cloud-app-dev]
module.networking.aws_subnet.public[1]: Refreshing state... [id=subnet-0953192e34b77e11f]
module.ecs.aws_ecs_task_definition.app: Refreshing state... [id=cloud-app-dev]
module.networking.aws_eip.nat[1]: Refreshing state... [id=eipalloc-0b2f2ff906dd246a9]
module.ecr.aws_ecr_repository.app: Refreshing state... [id=cloud-app-dev]
module.networking.aws_nat_gateway.main[1]: Refreshing state... [id=nat-0f87a0dedcd07d8de]
module.networking.aws_route_table.public: Refreshing state... [id=rtb-016124d2e562a8243]
module.ecs.aws_ecs_cluster.main: Refreshing state... [id=arn:aws:ecs:us-west-2:321225686735:cluster/cloud-app-dev-cluster]
module.networking.aws_internet_gateway.main: Refreshing state... [id=igw-05ef37f437c79e012]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with
the following symbols:
  + create
  - destroy

Terraform planned the following actions, but then encountered a problem:

  # aws_cloudwatch_log_group.app_logs will be created
  + resource "aws_cloudwatch_log_group" "app_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/ecs/production"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "production"
          + "Name"        = "production-log-group"
        }
      + tags_all          = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Name"        = "production-log-group"
          + "Terraform"   = "true"
        }
    }

  # aws_ecs_cluster.main will be created
  + resource "aws_ecs_cluster" "main" {
      + arn                = (known after apply)
      + capacity_providers = (known after apply)
      + id                 = (known after apply)
      + name               = "production-cluster"
      + tags               = {
          + "Environment" = "production"
          + "Name"        = "production-cluster"
        }
      + tags_all           = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Name"        = "production-cluster"
          + "Terraform"   = "true"
        }

      + default_capacity_provider_strategy (known after apply)

      + setting (known after apply)
    }

  # aws_ecs_service.app will be created
  + resource "aws_ecs_service" "app" {
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 1
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "production-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Environment" = "production"
          + "Name"        = "production-service"
        }
      + tags_all                           = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Name"        = "production-service"
          + "Terraform"   = "true"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "cloud-app-dev"
          + container_port   = 5000
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = [
              + "subnet-0216d0a8ea454e8e1",
              + "subnet-08191ae13a4459fef",
            ]
        }
    }

  # aws_ecs_task_definition.app will be created
  + resource "aws_ecs_task_definition" "app" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = jsonencode(
            [
              + {
                  + essential        = true
                  + image            = "321225686735.dkr.ecr.ap-southeast-1.amazonaws.com/cloud-app-dev:latest"
                  + logConfiguration = {
                      + logDriver = "awslogs"
                      + options   = {
                          + awslogs-group         = "/ecs/production"
                          + awslogs-region        = "us-west-2"
                          + awslogs-stream-prefix = "ecs"
                        }
                    }
                  + name             = "cloud-app-dev"
                  + portMappings     = [
                      + {
                          + containerPort = 5000
                          + hostPort      = 5000
                        },
                    ]
                },
            ]
        )
      + cpu                      = "256"
      + execution_role_arn       = (known after apply)
      + family                   = "production"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Environment" = "production"
          + "Name"        = "production"
        }
      + tags_all                 = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Name"        = "production"
          + "Terraform"   = "true"
        }
      + task_role_arn            = (known after apply)
    }

  # aws_iam_role.task_execution_role will be created
  + resource "aws_iam_role" "task_execution_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "production-execution-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags_all              = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role.task_role will be created
  + resource "aws_iam_role" "task_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "production-task-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags_all              = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.task_execution_role_policy will be created
  + resource "aws_iam_role_policy_attachment" "task_execution_role_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      + role       = "production-execution-role"
    }

  # aws_lb.main will be created
  + resource "aws_lb" "main" {
      + arn                                         = (known after apply)
      + arn_suffix                                  = (known after apply)
      + desync_mitigation_mode                      = "defensive"
      + dns_name                                    = (known after apply)
      + drop_invalid_header_fields                  = false
      + enable_deletion_protection                  = false
      + enable_http2                                = true
      + enable_tls_version_and_cipher_suite_headers = false
      + enable_waf_fail_open                        = false
      + enable_xff_client_port                      = false
      + id                                          = (known after apply)
      + idle_timeout                                = 60
      + internal                                    = false
      + ip_address_type                             = (known after apply)
      + load_balancer_type                          = "application"
      + name                                        = "production-alb"
      + preserve_host_header                        = false
      + security_groups                             = (known after apply)
      + subnets                                     = [
          + "subnet-05d8bc5f438168bb",
          + "subnet-0f6bbe72a0c10086",
        ]
      + tags                                        = {
          + "Environment" = "production"
          + "Name"        = "production-alb"
        }
      + tags_all                                    = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Name"        = "production-alb"
          + "Terraform"   = "true"
        }
      + vpc_id                                      = (known after apply)
      + xff_header_processing_mode                  = "append"
      + zone_id                                     = (known after apply)

      + subnet_mapping (known after apply)
    }

  # aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Terraform"   = "true"
        }

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # aws_lb_target_group.app will be created
  + resource "aws_lb_target_group" "app" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "production-tg"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Environment" = "production"
          + "Name"        = "production-tg"
        }
      + tags_all                           = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Name"        = "production-tg"
          + "Terraform"   = "true"
        }
      + target_type                        = "ip"
      + vpc_id                             = "vpc-09c0d727bbe0be07c"

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 3
          + unhealthy_threshold = 2
        }

      + stickiness (known after apply)

      + target_failover (known after apply)
    }

  # aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "Controls access to the ALB"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "production-alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "production"
          + "Name"        = "production-alb-sg"
        }
      + tags_all               = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Name"        = "production-alb-sg"
          + "Terraform"   = "true"
        }
      + vpc_id                 = "vpc-09c0d727bbe0be07c"
    }

  # aws_security_group.ecs_tasks will be created
  + resource "aws_security_group" "ecs_tasks" {
      + arn                    = (known after apply)
      + description            = "Allow inbound access from the ALB only"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 5000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 5000
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "production-ecs-tasks-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "production"
          + "Name"        = "production-ecs-tasks-sg"
        }
      + tags_all               = {
          + "Application" = "cloud-app"
          + "Environment" = "production"
          + "Name"        = "production-ecs-tasks-sg"
          + "Terraform"   = "true"
        }
      + vpc_id                 = "vpc-09c0d727bbe0be07c"
    }

  # module.ecr.aws_ecr_repository.app will be destroyed
  # (because aws_ecr_repository.app is not in configuration)
  - resource "aws_ecr_repository" "app" {
      - arn                  = "arn:aws:ecr:us-west-2:321225686735:repository/cloud-app-dev" -> null
      - id                   = "cloud-app-dev" -> null
      - image_tag_mutability = "MUTABLE" -> null
      - name                 = "cloud-app-dev" -> null
      - registry_id          = "321225686735" -> null
      - repository_url       = "321225686735.dkr.ecr.us-west-2.amazonaws.com/cloud-app-dev" -> null
      - tags                 = {
          - "Environment" = "dev"
          - "Name"        = "cloud-app-dev-ecr"
        } -> null
      - tags_all             = {
          - "Application" = "cloud-app"
          - "Environment" = "dev"
          - "Name"        = "cloud-app-dev-ecr"
          - "Terraform"   = "true"
        } -> null

      - encryption_configuration {
          - encryption_type = "AES256" -> null
            # (1 unchanged attribute hidden)
        }

      - image_scanning_configuration {
          - scan_on_push = true -> null
        }
    }

  # module.ecs.aws_iam_role.task_execution_role will be destroyed
  # (because aws_iam_role.task_execution_role is not in configuration)
  - resource "aws_iam_role" "task_execution_role" {
      - arn                   = "arn:aws:iam::321225686735:role/cloud-app-dev-execution-role" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2025-04-04T12:43:15Z" -> null
      - force_detach_policies = false -> null
      - id                    = "cloud-app-dev-execution-role" -> null
      - managed_policy_arns   = [] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "cloud-app-dev-execution-role" -> null
      - path                  = "/" -> null
      - role_last_used        = [
          - {
                # (2 unchanged attributes hidden)
            },
        ] -> null
      - tags                  = {
          - "Environment" = "dev"
          - "Name"        = "cloud-app-dev-execution-role"
        } -> null
      - tags_all              = {
          - "Application" = "cloud-app"
          - "Environment" = "dev"
          - "Name"        = "cloud-app-dev-execution-role"
          - "Terraform"   = "true"
        } -> null
      - unique_id             = "AROAUVSUK73H6KXWAB2IZ" -> null
        # (2 unchanged attributes hidden)
    }

  # module.ecs.aws_iam_role.task_role will be destroyed
  # (because aws_iam_role.task_role is not in configuration)
  - resource "aws_iam_role" "task_role" {
      - arn                   = "arn:aws:iam::321225686735:role/cloud-app-dev-task-role" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2025-04-04T12:43:15Z" -> null
      - force_detach_policies = false -> null
      - id                    = "cloud-app-dev-task-role" -> null
      - managed_policy_arns   = [] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "cloud-app-dev-task-role" -> null
      - path                  = "/" -> null
      - role_last_used        = [
          - {
                # (2 unchanged attributes hidden)
            },
        ] -> null
      - tags                  = {
          - "Environment" = "dev"
          - "Name"        = "cloud-app-dev-task-role"
        } -> null
      - tags_all              = {
          - "Application" = "cloud-app"
          - "Environment" = "dev"
          - "Name"        = "cloud-app-dev-task-role"
          - "Terraform"   = "true"
        } -> null
      - unique_id             = "AROAUVSUK73HX6UTYO54E" -> null
        # (2 unchanged attributes hidden)
    }

  # module.ecs.aws_iam_role_policy_attachment.task_execution_role_policy will be destroyed
  # (because aws_iam_role_policy_attachment.task_execution_role_policy is not in configuration)
  - resource "aws_iam_role_policy_attachment" "task_execution_role_policy" {
      - id         = "cloud-app-dev-execution-role-20250404124316627600000001" -> null
      - policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy" -> null
      - role       = "cloud-app-dev-execution-role" -> null
    }

Plan: 12 to add, 0 to change, 4 to destroy.

Changes to Outputs:
  - alb_dns_name        = "cloud-app-dev-alb-339600556.us-west-2.elb.amazonaws.com" -> null
  + alb_hostname        = (known after apply)
  - app_url             = "http://cloud-app-dev-alb-339600556.us-west-2.elb.amazonaws.com" -> null
  ~ cluster_name        = "cloud-app-dev-cluster" -> "production-cluster"
  - private_subnet_ids  = [
      - "subnet-02fc8ae5a286d86eb",
      - "subnet-0aebef85407799d94",
    ] -> null
  - public_subnet_ids   = [
      - "subnet-00ce3ca1d2f9e7a94",
      - "subnet-0953192e34b77e11f",
    ] -> null
  - repository_name     = "cloud-app-dev" -> null
  - repository_url      = "321225686735.dkr.ecr.us-west-2.amazonaws.com/cloud-app-dev" -> null
  ~ service_name        = "cloud-app-dev-service" -> "production-service"
  ~ task_definition_arn = "arn:aws:ecs:us-west-2:321225686735:task-definition/cloud-app-dev:1" -> (known after apply)
  - vpc_id              = "vpc-0a0ff425cfdd05199" -> null
╷
│ Error: describing ELBv2 Listener (arn:aws:elasticloadbalancing:us-west-2:321225686735:listener/app/cloud-app-dev-alb/d1ce9da24274bb2f/0480847e87230e0a): ValidationError: 'arn:aws:elasticloadbalancing:us-west-2:321225686735:listener/app/cloud-app-dev-alb/d1ce9da24274bb2f/0480847e87230e0a' is not a valid listener ARN
│       status code: 400, request id: c784b9ef-2470-4919-815f-fda38fec9d3f
│
│
╵
╷
│ Error: reading ELBv2 Load Balancer (arn:aws:elasticloadbalancing:us-west-2:321225686735:loadbalancer/app/cloud-app-dev-alb/d1ce9da24274bb2f): ValidationError: 'arn:aws:elasticloadbalancing:us-west-2:321225686735:loadbalancer/app/cloud-app-dev-alb/d1ce9da24274bb2f' is not a valid load balancer ARN
│       status code: 400, request id: ebb2025a-b3ed-4b62-9242-8f9f01f28ee1
│
│
╵
╷
│ Error: reading ELBv2 Target Group (arn:aws:elasticloadbalancing:us-west-2:321225686735:targetgroup/cloud-app-dev-tg/796dfc8afca7261e): ValidationError: 'arn:aws:elasticloadbalancing:us-west-2:321225686735:targetgroup/cloud-app-dev-tg/796dfc8afca7261e' is not a valid target group ARN
│       status code: 400, request id: 5cca2899-fdb6-4afa-b598-6d7bd22e4f2a
│
│
╵
╷
│ Error: reading ECS Task Definition (cloud-app-dev): InvalidParameterException: arn:aws:ecs:us-west-2:321225686735:task-definition/cloud-app-dev:1 is an invalid identifier.
│
│
╵
╷
│ Error: reading ECS Cluster (arn:aws:ecs:us-west-2:321225686735:cluster/cloud-app-dev-cluster): InvalidParameterException: Invalid Region in ARN
│
│
╵
╷
│ Error: reading ECS service (arn:aws:ecs:us-west-2:321225686735:service/cloud-app-dev-cluster/cloud-app-dev-service): InvalidParameterException: Invalid Region in ARN
│
│
╵
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 3/Oaktree/terraform$
