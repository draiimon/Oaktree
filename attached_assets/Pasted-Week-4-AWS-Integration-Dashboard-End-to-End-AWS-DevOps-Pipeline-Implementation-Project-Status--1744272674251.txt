Week 4: AWS Integration Dashboard
End-to-End AWS DevOps Pipeline Implementation

Project Status
Week 1
Completed
Linux, Git & Docker Basics
Week 2
Completed
CI/CD Pipeline Setup
Week 3
Completed
Cloud Services & IaC
Week 4
Completed
AWS DynamoDB Status: Connected
AWS DevOps Pipeline
Current status of your AWS integration workflow

Pipeline Status:Completed
Latest Build: #154
Source
AWS CodeCommit
Build
AWS CodeBuild
Test
AWS CodePipeline
Deploy
AWS DynamoDB
Monitor
AWS CloudWatch
AWS Infrastructure
Authentication and Data Management

AWS Connection Established
Connected to AWS Region: ap-southeast-1

AWS Resources (ap-southeast-1):
DynamoDB Table: OakTreeUsers
AWS Cognito (User Authentication)
IAM Roles & Permissions
AWS SDK Integration
Implementation Details:
# AWS Architecture
- Authentication: AWS Cognito User Pools
- Database: AWS DynamoDB for user data storage
- Identity: AWS IAM Roles and Policies
- Deployment: AWS CodeDeploy with CI/CD pipeline
- Monitoring: AWS CloudWatch for metrics and logs
- Storage: AWS S3 for static assets and configuration
- Networking: AWS VPC for secure environment isolation
View AWS Configuration
AWS Authentication Integration
AWS DynamoDB User Management

AWS Configuration:
# AWS DynamoDB Configuration
REGION: us-east-1
TABLE: OakTreeUsers
FEATURES: User Authentication, Data Storage
AWS_ACCESS_KEY_ID: [CREDENTIAL HIDDEN]
AWS_SECRET_ACCESS_KEY: [CREDENTIAL HIDDEN]
User authentication system successfully integrated with AWS DynamoDB

This integration provides:

Secure user registration with AWS-backed storage
Password encryption with crypto library
Seamless fallback to local database when offline
Cross-environment compatibility (local and cloud)
Try Authentication
Cross-Environment Deployment
Local, WSL, and Docker configurations

Local Development Setup:
# Clone repository
git clone https://github.com/draiimon/Oaktree.git
cd Oaktree

# Install dependencies
npm install

# Configure environment variables
# Create .env file with:
DATABASE_URL=postgresql://[user]:[password]@localhost:5432/oaktree
AWS_ACCESS_KEY_ID=your_access_key
AWS_SECRET_ACCESS_KEY=your_secret_key
AWS_REGION=your_region

# Run the application
npm run dev

# Application will be available at:
# http://localhost:5000
WSL-Specific Configuration:
Ensure PostgreSQL is installed and running in WSL
Set the proper DATABASE_URL in your .env file
Make sure Node.js and npm are installed in your WSL environment
Run with npm run dev from the project directory
Access using localhost or the WSL IP address
Dockerfile:
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

# Build the application
RUN npm run build

EXPOSE 5000

# Allow environment variables to be passed
ENV NODE_ENV=production
ENV DATABASE_URL=
ENV AWS_ACCESS_KEY_ID=
ENV AWS_SECRET_ACCESS_KEY=
ENV AWS_REGION=

CMD ["npm", "start"]
Docker Deployment Commands:
# Build the Docker image
docker build -t oaktree-app:latest .

# Run with environment variables
docker run -d \
  -p 5000:5000 \
  -e DATABASE_URL=postgresql://[user]:[password]@host.docker.internal:5432/oaktree \
  -e AWS_ACCESS_KEY_ID=your_access_key \
  -e AWS_SECRET_ACCESS_KEY=your_secret_key \
  -e AWS_REGION=your_region \
  --name oaktree-container \
  oaktree-app:latest

# For local development without AWS, omit AWS variables:
docker run -d \
  -p 5000:5000 \
  -e DATABASE_URL=postgresql://[user]:[password]@host.docker.internal:5432/oaktree \
  --name oaktree-container \
  oaktree-app:latest
Important Notes for Cross-Environment Compatibility:
Application can run with or without AWS credentials
When AWS credentials are not provided, it falls back to local PostgreSQL
For WSL, use host.docker.internal to connect to Windows services
In Docker, you may need to configure network settings for proper database connectivity
All environment variables can be passed via .env file or directly on command line
Container Metrics:
CPU Usage
24.8%
Memory Usage
121MB / 1GB
Network I/O
0.2MB/s
Project Documentation
Complete DevOps workflow implementation

OakTree DevOps Project - Week 4 Final Submission
This project demonstrates a complete end-to-end DevOps workflow incorporating all components from Weeks 1-3:

AWS DynamoDB: NoSQL database for secure user authentication and data storage
AWS IAM: Identity and Access Management for secure access control to AWS resources
AWS SDK for JavaScript: Comprehensive toolkit for interacting with AWS services
AWS CodeCommit: Git repository service with fully managed source control
AWS CodeBuild: Continuous integration service for compiling and testing code
AWS CodeDeploy: Automated deployment service to EC2 instances and other compute platforms
AWS CloudWatch: Monitoring and observability service for metrics and logs
AWS Architecture Integration
The application leverages multiple AWS services:

Authentication Flow: DynamoDB for secure user credential storage and verification
Data Storage: DynamoDB Tables with appropriate access patterns and indexing
Security: AWS IAM with fine-grained access control and least privilege principles
Deployment: AWS CodePipeline to orchestrate the entire CI/CD workflow
Client Integration: AWS SDK for JavaScript with proper credential management
Environment Management: Cross-region deployment with consistent configuration
Try Authentication
View GitHub Repository
Setup Instructions